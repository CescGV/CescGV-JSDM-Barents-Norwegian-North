## Result processing and Figures
# Resolution of eqsize cells: 26100 x 46200 m = 1205.82 km2

### -- Trait and CV data per species 
## To check whether model performance biases the result, or traits have an 
## effect on different measures

cv_mean = read.csv("cv_mean.csv")[,-1]
traits = read.csv("data/Species_traits.csv")
load("all_layers.Rdata")

cv_sel = cv_mean[cv_mean$mean.R2 >0.05,]

### -- Result 1: Species richness change-- ### #####

# Richness projections can be with lon lat cells (easier for correlation)
library(raster)
library(sf)
library(viridis)
library(tidyverse)
library(readxl)
library(ozmaps) 
library(grid)
library(gt)

countries = rgdal::readOGR("Env data/Shape/world_countries.shp")
 
extent(countries)
countries = raster::crop(countries,raster::extent(-12, 55, 46, 84))
countries2 <- st_as_sf(countries)
countries2 = st_union(countries2)

plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = value), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}

## Species richness

eliminate_extent <- extent(-Inf, 10, 80, Inf)

# Create a mask to identify points outside the desired region
mask <- all.layers[[1]][[1]][[1]]
mask[] <- 1
mask[eliminate_extent] <- NA
fmask = mask(all.layers[[1]][[1]][[1]], mask = mask)

rich = raster::stack("Richness_1.tiff")
library(raster)
years <- c(seq(2030, 2100, by = 10),2010)
scenarios <- c(126, 245, 585)

eliminate_extent <- extent(-Inf, 10, 80, Inf)

# Create a mask to identify points outside the desired region
mask <- all.layers[[1]][[1]][[1]]
mask[] <- 1
mask[eliminate_extent] <- NA
fmask = mask(all.layers[[1]][[1]][[1]], mask = mask)

combinations <- paste0(rep(years, each = length(scenarios)), "_", rep(scenarios, times = length(years)))
names(rich) = combinations

diff0 = ((rich[[07]] - rich[[25]]) / rich[[25]]) * 100
diff1 = ((rich[[07]] - rich[[25]]) / rich[[25]]) * 100
diff2 = ((rich[[08]] - rich[[25]]) / rich[[25]]) * 100
diff3 = ((rich[[09]] - rich[[25]]) / rich[[25]]) * 100
diff4 = ((rich[[22]] - rich[[25]]) / rich[[25]]) * 100
diff5 = ((rich[[23]] - rich[[25]]) / rich[[25]]) * 100
diff6 = ((rich[[24]] - rich[[25]]) / rich[[25]]) * 100

diff1 <- mask(diff1, fmask)
diff2 <- mask(diff2, fmask)
diff3 <- mask(diff3, fmask)
diff4 <- mask(diff4, fmask)
diff5 <- mask(diff5, fmask)
diff6 <- mask(diff6, fmask)

diff1 = data.frame(coordinates(diff1), value = values(diff1))
diff2 = data.frame(coordinates(diff2), value = values(diff2))
diff3 = data.frame(coordinates(diff3), value = values(diff3))
diff4 = data.frame(coordinates(diff4), value = values(diff4))
diff5 = data.frame(coordinates(diff5), value = values(diff5))
diff6 = data.frame(coordinates(diff6), value = values(diff6))

lapply(list(diff1$value,diff2$value,diff3$value,diff4$value,diff5$value,diff6$value), t.test)

diff0 = rich[[25]]
diff0 = data.frame(coordinates(diff0), value = values(diff0))

rich0 = plot_rich_diff(diff0) + ggtitle("Present day") + scale_fill_viridis(name = "Richness S   ",na.value = "transparent") 
rich1 = plot_rich_diff(diff1) + ggtitle("2050     SSP1-2.6") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent") 
rich2 = plot_rich_diff(diff2) + ggtitle("2050     SSP2-4.5") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent") 
rich3 = plot_rich_diff(diff3) + ggtitle("2050     SSP5-8.5") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent") #,#limits = c(-20,50), breaks = c(-20,0,25,50)) 
rich4 = plot_rich_diff(diff4) + ggtitle("SSP1-2.6 (+1.6°C)") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent", limits = c(-23, 120)) #,#limits = c(-20,40), breaks = c(-20,0,20,40)) 
rich5 = plot_rich_diff(diff5) + ggtitle("SSP2-4.5 (+2.6°C)") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent", limits = c(-23, 120)) #,#limits = c(-20,80), breaks = c(0,25,50,75,100)) 
rich6 = plot_rich_diff(diff6) + ggtitle("SSP5-8.5 (+4.5°C)") + scale_fill_viridis(name = "S change (%)   ",na.value = "transparent", limits = c(-23, 120)) #,#limits = c(-20,120)) 

library(gridExtra)
r2050 = ggpubr::ggarrange(rich1, rich2, rich3, ncol = 3, common.legend = T, legend = "right") #, top = textGrob("2050 - Historic", gp=gpar(fontsize=15,font=8)))
r2100 = ggpubr::ggarrange(rich4, rich5, rich6, ncol = 3, common.legend = T, legend = "right") #, top = textGrob("2100 - Historic", gp=gpar(fontsize=15,font=8)))

pdf("Richness_change.pdf")
grid.arrange(r2050, r2100)
dev.off()


## Dominance index
domin = raster::stack("Dominance.tiff")

diff0.dom = domin[[25]]

diff1.dom = ((domin[[07]] - domin[[25]]) / domin[[25]]) * 100
diff2.dom = ((domin[[08]] - domin[[25]]) / domin[[25]]) * 100
diff3.dom = ((domin[[09]] - domin[[25]]) / domin[[25]]) * 100
diff4.dom = ((domin[[22]] - domin[[25]]) / domin[[25]]) * 100
diff5.dom = ((domin[[23]] - domin[[25]]) / domin[[25]]) * 100
diff6.dom = ((domin[[24]] - domin[[25]]) / domin[[25]]) * 100

diff1.dom = data.frame(coordinates(domin[[07]]), value = values(domin[[07]]))
diff2.dom = data.frame(coordinates(domin[[08]]), value = values(domin[[08]]))
diff3.dom = data.frame(coordinates(domin[[09]]), value = values(domin[[09]]))
diff4.dom = data.frame(coordinates(domin[[22]]), value = values(domin[[22]]))
diff5.dom = data.frame(coordinates(domin[[23]]), value = values(domin[[23]]))
diff6.dom = data.frame(coordinates(domin[[24]]), value = values(domin[[24]]))

lapply(list(diff1.dom$value,diff2.dom$value,diff3.dom$value,diff4.dom$value,diff5.dom$value,diff6.dom$value), t.test)

diff0.dom = domin[[25]]
diff1.dom = domin[[07]]
diff2.dom = domin[[08]]
diff3.dom = domin[[09]]
diff4.dom = domin[[22]]
diff5.dom = domin[[23]]
diff6.dom = domin[[24]]

diff1.dom <- mask(diff1.dom, fmask)
diff2.dom <- mask(diff2.dom, fmask)
diff3.dom <- mask(diff3.dom, fmask)
diff4.dom <- mask(diff4.dom, fmask)
diff5.dom <- mask(diff5.dom, fmask)
diff6.dom <- mask(diff6.dom, fmask)

diff0.dom = data.frame(coordinates(diff0.dom), value = values(diff0.dom))
diff1.dom = data.frame(coordinates(diff1.dom), value = values(diff1.dom))
diff2.dom = data.frame(coordinates(diff2.dom), value = values(diff2.dom))
diff3.dom = data.frame(coordinates(diff3.dom), value = values(diff3.dom))
diff4.dom = data.frame(coordinates(diff4.dom), value = values(diff4.dom))
diff5.dom = data.frame(coordinates(diff5.dom), value = values(diff5.dom))
diff6.dom = data.frame(coordinates(diff6.dom), value = values(diff6.dom))

rich0.dom = plot_rich_diff(diff0.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "Dominance (%)",na.value = "transparent", limits = c(10,96)) 
rich1.dom = plot_rich_diff(diff1.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "H index",na.value = "transparent",limits = c(10,100)) 
rich2.dom = plot_rich_diff(diff2.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "H index",na.value = "transparent",limits = c(10,100)) 
rich3.dom = plot_rich_diff(diff3.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "H index",na.value = "transparent",limits = c(10,100)) 
rich4.dom = plot_rich_diff(diff4.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "Dominance (%)",na.value = "transparent",limits = c(10,100)) 
rich5.dom = plot_rich_diff(diff5.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "Dominance (%)",na.value = "transparent",limits = c(10,100))
rich6.dom = plot_rich_diff(diff6.dom) + ggtitle("Eliminate ") + scale_fill_viridis(name = "Dominance (%)",na.value = "transparent",limits = c(10,100)) 

r2050.dom = ggpubr::ggarrange(rich1.dom, rich2.dom, rich3.dom, ncol = 3, common.legend = T, legend = "right") #, top = textGrob("2050 - Historic", gp=gpar(fontsize=15,font=8)))
r2100.dom = ggpubr::ggarrange(rich4.dom, rich5.dom, rich6.dom, ncol = 3, common.legend = T, legend = "right") #, top = textGrob("2100 - Historic", gp=gpar(fontsize=15,font=8)))


r2100 = ggpubr::ggarrange(rich4 + theme(plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          rich5 + theme(axis.title.y = element_blank(),
                                     axis.text.y = element_blank(),
                                     axis.ticks.y = element_blank(),
                                     plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          rich6 + theme(axis.title.y = element_blank(),
                                        axis.text.y = element_blank(),
                                        axis.ticks.y = element_blank(),
                                        plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          ncol = 3, common.legend = T, legend = "right", align = "hv") #, top = textGrob("2100 - Historic", gp=gpar(fontsize=15,font=8)))


r2100.dom = ggpubr::ggarrange(rich4.dom + theme(plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          rich5.dom + theme(axis.title.y = element_blank(),
                                        axis.text.y = element_blank(),
                                        axis.ticks.y = element_blank(),
                                        plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          rich6.dom + theme(axis.title.y = element_blank(),
                                        axis.text.y = element_blank(),
                                        axis.ticks.y = element_blank(),
                                        plot.margin = unit(c(0,0.2,0,-2), 'lines')),
                          ncol = 3, common.legend = T, legend = "right", align = "hv") #, top = textGrob("2100 - Historic", gp=gpar(fontsize=15,font=8)))


a = grid.arrange(rich0, r2100, ncol = 2, widths = c(1, 2))
b = grid.arrange(rich0.dom, r2100.dom, ncol = 2, widths = c(1, 2))

pdf("Richness_change.pdf", width = 15, height = 9)

ggpubr::ggarrange(rich0, 
                  rich4 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  rich5 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  rich6 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  align = "hv",
                  nrow = 1, ncol = 4, common.legend = TRUE, legend="bottom")

ggpubr::ggarrange(rich4 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  rich5 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  rich6 + ylab("") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()),
                  align = "hv",
                  nrow = 1, ncol = 4, common.legend = TRUE, legend="bottom")
dev.off()


### -- Result 2: Species' area change with time -- ### #####
dat = read.csv("centroid_distribution.csv")[,-1]
dat = separate(data = dat, col = Time, 
               into = c("Year", "Scenario"),
               sep = "_")

dat$Area = dat$Area * 1205.82
dat$Year = as.numeric(dat$Year)
dat = dat %>% arrange(Year) %>% group_by(Scenario,Species, Var) %>% 
  mutate(Area_percent = (Area/first(Area)) * 100,
         CPUE_percent = (CPUE/first(CPUE)) * 100)

head(dat)

dat_sel = dat %>% filter(Species %in% cv_sel$Sp)


## Fit LR to each species habitat across the three points o time 
sl.hab = dat %>%filter(Var == "PA") %>%
  group_by(Species, Scenario, Var) %>% 
  do(broom::tidy(lm(Area_percent ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) %>%
  mutate(Var1 = "Range")

sl.cpue = dat_sel %>% filter(Var == "cpuehab") %>%
  group_by(Species, Scenario, Var) %>%
  do(broom::tidy(lm(Area_percent ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) %>%
  mutate(Var1 = "Range")

sl.cpue.total = dat_sel %>% filter(Var == "cpuehab") %>%
  group_by(Species, Scenario, Var) %>%
  do(broom::tidy(lm(CPUE_percent ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate,Var) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) %>%
  mutate(Var1 = "Biomass")

sl.best.cpue.area = dat_sel %>% filter(Var == "bestcpuehab") %>%
  group_by(Species, Scenario, Var) %>%
  do(broom::tidy(lm(Area_percent ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate,Var) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) %>%
  mutate(Var1 = "Core range")

sl.best.cpue.total = dat_sel %>% filter(Var == "bestcpuehab") %>%
  group_by(Species, Scenario, Var) %>%
  do(broom::tidy(lm(CPUE_percent ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate,Var) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) %>%
  mutate(Var1 = "Core biomass")


sl = rbind(sl.hab, sl.cpue.total,
           sl.best.cpue.area, sl.best.cpue.total)
sl$Scenario = factor(sl$Scenario)
levels(sl$Scenario) = c("SSP1-2.6","SSP2-4.5","SSP5-8.5")

sl1 = sl.hab %>% ungroup() %>% select(2,3,5,6) %>% pivot_wider(names_from = Var1, values_from = Year)
sl2 = sl.cpue.total%>% ungroup()  %>% select(1,2,5,6) %>%  pivot_wider(names_from = Var1, values_from = Year)
sl3 = sl.best.cpue.area%>% ungroup()  %>% select(1,2,5,6) %>%  pivot_wider(names_from = Var1, values_from = Year)
sl4 = sl.best.cpue.total%>% ungroup()  %>% select(1,2,5,6) %>%  pivot_wider(names_from = Var1, values_from = Year)

sl5 = full_join(sl1,full_join(sl2, full_join(sl3,sl4)))
write.csv(sl5, "Supplementary_Table_2.csv")
## No significant difference between scenarios in Habitat
## Nor in best habitat

summary(lm(sl.hab$Year~sl.hab$Scenario))
summary(lm(sl.cpue$Year~sl.cpue$Scenario))
summary(lm(sl.cpue.total$Year~sl.cpue$Scenario))

## Significant changes in Habitat area change in scenario 1 and 2
by(sl.hab, sl.hab$Scenario, function(sub_df) {
  t_test_result <- t.test(sub_df$Year)
  return(t_test_result)
})
by(sl.hab, sl.hab$Scenario, function(sub_df) {
  t_test_result <- wilcox.test(sub_df$Year)
  return(t_test_result)
})

## Significant changes in biomass under all scenarios
by(sl.cpue.total, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- t.test(sub_df$Year)
  return(t_test_result)
})
by(sl.cpue.total, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- wilcox.test(sub_df$Year)
  return(t_test_result)
})

## Significant changes in best area under all scenarios 
by(sl.best.cpue.area, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- t.test(sub_df$Year)
  return(t_test_result)
})
by(sl.best.cpue.area, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- wilcox.test(sub_df$Year)
  return(t_test_result)
})

## Significant changes in best biomass under 2nd and third scenarios
by(sl.best.cpue.total, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- t.test(sub_df$Year)
  return(t_test_result)
})
by(sl.best.cpue.total, sl.cpue$Scenario, function(sub_df) {
  t_test_result <- wilcox.test(sub_df$Year)
  return(t_test_result)
})

with( sl.hab , aggregate( Year , by=list(Scenario) , FUN=summary)  )
with( sl.cpue.total , aggregate( Year , by=list(Scenario) , FUN=summary)  )
with( sl.best.cpue.area , aggregate( Year , by=list(Scenario) , FUN=summary)  )
with( sl.best.cpue.total , aggregate( Year , by=list(Scenario) , FUN=summary)  )
# Color palette
cols = colortools::triadic("mediumpurple3")
sl$Scenario = as.factor(sl$Scenario)
levels(sl$Scenario) = c("SSP1-1.26", "SSP2-4.5", "SSP5-8.5")

a = ggplot(sl[sl$Var1 == "Range",]) +
  geom_boxplot(aes( x = Scenario,y = Year, fill = Scenario)) +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols,
                    labels = c("SSP1-2.6 (+1.6°C)",
                               "SSP2-4.5 (+2.6°C)",
                               "SSP5-8.5 (+4.5°C)")) +
  #facet_wrap(~ Scenario) +
  theme_bw() +
  geom_text(aes(x=1, y=2.7, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=2, y=2.7, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=3, y=2.7, label="*"), size = 10, data.frame()) + 
  #geom_text(aes(x=3, y=5, label="*"), size = 10, data.frame()) + 
  theme(legend.position = "none") +
  geom_hline(yintercept=0, linetype="dashed") +
  labs(title = "(A)",
       x = "",
       y = "Geographic range change ( %area / yr)")

b = ggplot(sl[sl$Var1 == "Biomass",]) +
  geom_boxplot(aes( x = Scenario,y = Year, fill = Scenario)) +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols,
                    labels = c("SSP1-2.6 (+1.6°C)",
                               "SSP2-4.5 (+2.6°C)",
                               "SSP5-8.5 (+4.5°C)")) +
  geom_text(aes(x=1, y=7, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=2, y=7, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=3, y=7, label="*"), size = 10, data.frame()) + 
  #facet_wrap(~ Scenario) +
  theme_bw() + 
  geom_hline(yintercept=0, linetype="dashed") +
  #theme(legend.position = "none") +
  labs(title = "(B)",
       x = "",
       y = "Biomass change ( %CPUE / yr)")

c = ggplot(sl[sl$Var1 == "Core range",]) +
  geom_boxplot(aes( x = Scenario,y = Year, fill = Scenario)) +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols,
                    labels = c("SSP1-2.6 (+1.6°C)",
                               "SSP2-4.5 (+2.6°C)",
                               "SSP5-8.5 (+4.5°C)"))+
  geom_text(aes(x=3, y=3, label="*"), size = 10, data.frame()) + 
  #geom_text(aes(x=1, y=3, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=2, y=3, label="*"), size = 10, data.frame()) + 
  #facet_wrap(~ Scenario) +
  theme_bw() + 
  geom_hline(yintercept=0, linetype="dashed") +
  #theme(legend.position = "none") +
  labs(title = "(C)",
       x = "",
       y = " Core range change ( %area / yr)") 

d = ggplot(sl[sl$Var1 == "Core biomass",]) +
  geom_boxplot(aes( x = Scenario,y = Year, fill = Scenario)) +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols,
                    labels = c("SSP1-2.6 (+1.6°C)",
                               "SSP2-4.5 (+2.6°C)",
                               "SSP5-8.5 (+4.5°C)")) +
  #geom_text(x=1, y=9, label="*", size = 10) + 
  geom_text(aes(x=2, y=9, label="*"), size = 10, data.frame()) + 
  geom_text(aes(x=3, y=9, label="*"), size = 10, data.frame()) + 
  #facet_wrap(~ Scenario) +
  theme_bw() + 
  geom_hline(yintercept=0, linetype="dashed") +
  #theme(legend.position = "none") +
  labs(title = "(D)",
       x = "",
       y = "Core biomass change ( %CPUE / yr)") 

pdf("habitat_and_core_habitat_time_vert.pdf",height = 8, width = 8)
ggpubr::ggarrange(a + theme(axis.title = element_text(size = 13)),
                  b + theme(axis.title = element_text(size = 13)),
                  c + theme(axis.title = element_text(size = 13)),
                  d + theme(axis.title = element_text(size = 13)),
                  ncol=2, nrow=2,
                  common.legend = TRUE,legend="bottom",
                  align = "hv")
dev.off()

png("habitat_and_core_habitat_time_vert.png",height = 3500, width = 3000, res = 400)
ggpubr::ggarrange(a + theme(axis.title = element_text(size = 13)),
                  b + theme(axis.title = element_text(size = 13)),
                  c + theme(axis.title = element_text(size = 13)),
                  d + theme(axis.title = element_text(size = 13)),
                  ncol=2, nrow=2,
                  common.legend = TRUE,legend="bottom",
                  align = "hv")
dev.off()

# Very unequal variance, I need ANOVA without assuming eq.vars

# Variances differ, but still, are there differences between Scenarios?
## One way anovas with unequal variances 
oneway.test(Year ~ Scenario, 
            data = sl.hab,
            na.action=na.omit, var.equal=FALSE)

oneway.test(Year ~ Scenario, 
            data = sl.cpue,
            na.action=na.omit, var.equal=FALSE)

### -- Traits and species changes

sl$Species =  gsub('[.]',' ',sl$Species)
sl_t = merge(traits, sl) 
sl_t= sl_t[!is.na(sl_t$Year),]
colnames(sl_t)

## Build a MLR with selected ones  # % of change

full.model.range = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                      data = sl_t[sl_t$Var1 == "Range",])

full.model.biomass = lm(Year ~Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph)+ scale(DepthMax)+ scale(Fecundity) + scale(Lm),
                        data = sl_t[sl_t$Var1 == "Biomass",])

full.model.core =lm(Year ~Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph)+ scale(DepthMax) + scale(Lm) + scale(Fecundity),
                      data = sl_t[sl_t$Var1 == "Core range",])

full.model.core.biomass =lm(Year ~Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                      scale(Troph)+ scale(DepthMax) + scale(Lm) + scale(Fecundity),
                    data = sl_t[sl_t$Var1 == "Core biomass",])

### -- Backward model selection -- ###
## Range 
summary(full.model.range)
best.model.range = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                      data = sl_t[sl_t$Var1 == "Range",])

best.model.range =lm(Year ~ 0+Zoo_final*Scenario +
                       scale(Troph) , 
                     data = sl_t[sl_t$Var1 == "Range",])

summary(best.model.range)
sjPlot::plot_model(best.model.range, type = "pred", terms = "Troph", show.data = T)
## Biomass
summary(full.model.biomass)
best.model.biomass = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                      data = sl_t[sl_t$Var1 == "Biomass",])

best.model.biomass = lm(Year ~ 0 + Zoo_final*Scenario + scale(MaxLengthTL), 
                         data = sl_t[sl_t$Var1 == "Biomass",])

summary(best.model.biomass)
sjPlot::plot_model(best.model.biomass, 
                   type = "pred", terms = "Zoo_final[arctic,boreal]", 
                   show.data = T)

## Core range
summary(full.model.core)
best.model.core = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                      data = sl_t[sl_t$Var1 == "Core range",])

best.model.core = lm(Year ~ 0+Zoo_final*Scenario + scale(DepthMax), 
                     data = sl_t[sl_t$Var1 == "Core range",])

summary(best.model.core)

## Core biomass
summary(full.model.core.biomass)
best.model.core.biomass = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                       scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                     data = sl_t[sl_t$Var1 == "Core biomass",])

best.model.core.biomass = lm(Year ~ 0+Zoo_final*Scenario, 
                             data = sl_t[sl_t$Var1 == "Core biomass",])

summary(best.model.core.biomass)

par(mfrow = c(3,1))
plot(effects::allEffects(best.model.range)[[2]])
plot(effects::allEffects(best.model.biomass)[[2]])
plot(effects::allEffects(best.model.core)[[2]])
plot(effects::allEffects(best.model.core.biomass)[[1]])

pdf("traits.pdf", width = 15)
gridExtra::grid.arrange(a,b,c,ncol = 3)
dev.off()

sl_t$Scenario = as.factor(sl_t$Scenario)
levels(sl_t$Scenario) = c("SSP1-2.6 (+1.6°C)","SSP2-4.5 (+2.6°C)","SSP5-8.5 (+4.5°C)")
colortools::setColors("#3D6DCC", 6)
library(colortools)
margin = theme(plot.margin = unit(c(0,0.01,0,0.01), "cm"))

a = ggplot(sl_t[sl_t$Var1 == "Range",])  +
  geom_boxplot(aes(x = Zoo_final, y = Year, fill = Zoo_final), alpha = 0.8) + 
  #scale_fill_manual(values = setColors("#3D6DCC", 6))+ theme_bw() +
  #facet_wrap(.~Scenario, scales = "free")+
  facet_wrap(.~Scenario)+
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())  + 
  geom_hline(yintercept=0, linetype="dashed") +
  labs(fill="Zoogeography") +
  xlab("")+ theme_bw() +
  margin+
  theme(axis.text.x = element_text(angle = 30, vjust = 0.9, hjust=1))+
  ylab(expression("Range change ( %area / yr)")) + 
  ggtitle("(A)")

b = ggplot(sl_t[sl_t$Var1 == "Biomass",])  +
  geom_boxplot(aes(x = Zoo_final, y = Year, fill = Zoo_final), alpha = 0.8) + 
  #facet_wrap(.~Scenario, scales = "free")+
  facet_wrap(.~Scenario)+
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())  + 
  geom_hline(yintercept=0, linetype="dashed") +
  ylab(expression("Biomass change ( %CPUE / yr)"))+
  xlab("")+ theme_bw() +margin+
  theme(axis.text.x = element_text(angle = 30, vjust = 0.9, hjust=1))+
  labs(fill="Zoogeography") +
  ggtitle("(B)")

c = ggplot(sl_t[sl_t$Var1 == "Core range",])+
  geom_boxplot(aes(x = Zoo_final, y = Year, fill = Zoo_final), alpha = 0.8) + 
  #facet_wrap(.~Scenario, scales = "free")+
  facet_wrap(.~Scenario)+
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())  +
  geom_hline(yintercept=0, linetype="dashed") +
  labs(fill="Zoogeography") +
  xlab("")+ theme_bw() +margin+
  theme(axis.text.x = element_text(angle = 30, vjust = 0.9, hjust=1))+
  ylab("Core range change ( %area / yr)") + 
  ggtitle("(C)")

d = ggplot(sl_t[sl_t$Var1 == "Core biomass",])+
  geom_boxplot(aes(x = Zoo_final, y = Year, fill = Zoo_final), alpha = 0.8) + 
  #facet_wrap(.~Scenario, scales = "free")+
  facet_wrap(.~Scenario)+
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())  +
  geom_hline(yintercept=0, linetype="dashed") +
  labs(fill="Zoogeography") +
  xlab("") + theme_bw() +margin+
  theme(axis.text.x = element_text(angle = 30, vjust = 0.9, hjust=1))+
  ylab("Biomass change ( %CPUE / yr)") + 
  ggtitle("(D)")

png("biogeography_vs_area.png", height = 8000, width = 5000, res = 700)
ggpubr::ggarrange(a,b,c,d, 
                  nrow = 4, common.legend = TRUE,legend="bottom")
dev.off()

pdf("biogeography_vs_area.pdf", height = 13, width = 8)
ggpubr::ggarrange(a,b,c,d, 
                  nrow = 4, common.legend = TRUE,legend="bottom")
dev.off()

### -- Result 3: Species' geographical shift with time -- ### #####
dat = read.csv("centroid_distribution.csv")[,-1]
dat = separate(data = dat, col = Time, 
               into = c("Year", "Scenario"),
               sep = "_")

head(dat)

dat_sel = dat %>% filter(Species %in% cv_sel$Sp)
# Calculate the difference in latitude from "Historic" for each combination of species and variable

### -- Result 3.1: X plot ####
## PA HABITAT
result_df.PA.100 <- dat %>% 
  filter(Var == "PA",
         Year %in% c("2010", "2100")) %>%
  group_by(Species, Scenario) %>%
  mutate(lat_dif = (Lat - Lat[Year == "2010"])/90,
         lon_dif = (Lon - Lon[Year == "2010"])/90) %>% filter(Year == 2100) %>%
  ungroup()


range(result_df.PA.100$lat_dif, na.rm=T)
range(result_df.PA.100$lon_dif, na.rm=T)

xlim1 = floor(range(result_df.PA.100$lon_dif, na.rm=T)[1]) 
xlim2 = ceiling(range(result_df.PA.100$lon_dif, na.rm=T)[2]) 

ylim1 = floor(range(result_df.PA.100$lat_dif, na.rm=T)[1])
ylim2 = ceiling(range(result_df.PA.100$lat_dif, na.rm=T)[2])

## CPUE HABITAT
result_df.CPUE.100 <- dat_sel %>% 
  filter(Var == "cpuehab",
         Year %in% c("2010", "2100")) %>%
  group_by(Species, Scenario) %>%
  mutate(lat_dif = (Lat - Lat[Year == "2010"])/90,
         lon_dif = (Lon - Lon[Year == "2010"])/90) %>% filter(Year == 2100) %>%
  ungroup()

hulls.100 <- na.omit(result_df.CPUE.100) %>%
  st_as_sf(coords = c("lon_dif", "lat_dif")) %>%
  group_by(Scenario) %>%
  summarize(geometry = st_union(geometry)) %>%
  st_convex_hull()

hulls.100.0 =  na.omit(result_df.CPUE.100) %>%
  group_by(Scenario) %>%
  do(convex_hull = chull(.$lon_dif, .$lat_dif)) %>%
  ungroup()
col = colortools::triadic("mediumpurple3")

hulls1 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "126",])[hulls.100.0[[2]][[1]],]
hulls2 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "245",])[hulls.100.0[[2]][[2]],]
hulls3 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "585",])[hulls.100.0[[2]][[3]],]

p_result_df.CPUE.100 = ggplot(result_df.CPUE.100, aes(x = lon_dif, y = lat_dif, color = Scenario)) +
  geom_point() +
  #geom_polygon(data = hulls3, aes(group = Scenario, fill = Scenario), alpha = 0.1) +
  #geom_polygon(data = hulls2, aes(group = Scenario, fill = Scenario), alpha = 0.3) +
  #geom_polygon(data = hulls1, aes(group = Scenario, fill = Scenario), alpha = 0.3) +
  theme_minimal() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  scale_fill_manual(values = col) +
  scale_color_manual(values = col)
  
  
  
a = na.omit(result_df.CPUE.100) 
k2 <- MASS::kde2d(a$lon_dif, a$lat_dif)
col = colortools::triadic("mediumpurple3")

range(result_df.CPUE.100$lat_dif, na.rm=T)
range(result_df.CPUE.100$lon_dif, na.rm=T)

xlim1.cpue = floor(range(result_df.CPUE.100$lon_dif, na.rm=T)[1])
xlim2.cpue = ceiling(range(result_df.CPUE.100$lon_dif, na.rm=T)[2]) 

ylim1.cpue = floor(range(result_df.CPUE.100$lat_dif, na.rm=T)[1])
ylim2.cpue = ceiling(range(result_df.CPUE.100$lat_dif, na.rm=T)[2])

## CPUE BEST HABITAT
result_df.BEST.CPUE.100 <- dat_sel %>% 
  filter(Var == "bestcpuehab",
         Year %in% c("2010", "2100")) %>%
  group_by(Species, Scenario) %>%
  mutate(lat_dif = (Lat - Lat[Year == "2010"])/90,
         lon_dif = (Lon - Lon[Year == "2010"])/90) %>% filter(Year == 2100) %>%
  ungroup()

hulls.100 <- na.omit(result_df.BEST.CPUE.100) %>%
  st_as_sf(coords = c("lon_dif", "lat_dif")) %>%
  group_by(Scenario) %>%
  summarize(geometry = st_union(geometry)) %>%
  st_convex_hull()

hulls.100 =  na.omit(result_df.BEST.CPUE.100) %>%
  group_by(Scenario) %>%
  do(convex_hull = chull(.$lon_dif, .$lat_dif)) %>%
  ungroup()
col = colortools::triadic("mediumpurple3")

hulls1 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "126",])[hulls.100[[2]][[1]],]
hulls2 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "245",])[hulls.100[[2]][[2]],]
hulls3 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "585",])[hulls.100[[2]][[3]],]

p_result_df.BEST.CPUE.100 = ggplot(result_df.BEST.CPUE.100, aes(x = lon_dif, y = lat_dif, color = Scenario)) +
  geom_point() +
  #geom_polygon(data = hulls3, aes(group = Scenario, fill = Scenario), alpha = 0.1) +
  #geom_polygon(data = hulls2, aes(group = Scenario, fill = Scenario), alpha = 0.3) +
  #geom_polygon(data = hulls1, aes(group = Scenario, fill = Scenario), alpha = 0.3) +
  theme_minimal() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
  scale_fill_manual(values = col) +
  scale_color_manual(values = col)


grid.arrange(p_result_df.PA.100,
             p_result_df.CPUE.100,  
             p_result_df.BEST.CPUE.100)


a = na.omit(result_df.BEST.CPUE.100) 
k3 <- MASS::kde2d(a$lon_dif, a$lat_dif)
col = colortools::triadic("mediumpurple3")

range(result_df.BEST.CPUE.100$lat_dif, na.rm=T)
range(result_df.BEST.CPUE.100$lon_dif, na.rm=T)

xlim1.best.cpue = floor(range(result_df.BEST.CPUE.100$lon_dif, na.rm=T)[1])
xlim2.best.cpue = ceiling(range(result_df.BEST.CPUE.100$lon_dif, na.rm=T)[2])

ylim1.best.cpue = floor(range(result_df.BEST.CPUE.100$lat_dif, na.rm=T)[1])
ylim2.best.cpue = ceiling(range(result_df.BEST.CPUE.100$lat_dif, na.rm=T)[2])
#pdf("Geographical_shifts.pdf", width = 10, height = 4)
png("Geographical_shifts.png", height = 6000, width = 2500, res = 800)

pa_1 = na.omit(result_df.PA.100[result_df.PA.100$Scenario == "126",])
dens1 <- MASS::kde2d(data.frame(x=pa_1$lon_dif, y=pa_1$lat_dif)$x,
                     data.frame(x=pa_1$lon_dif, y=pa_1$lat_dif)$y)
df1 = as.data.frame(expand.grid(x = dens1$x, y = dens1$y))
df1$z = as.vector(dens1$z)

pa_2 = na.omit(result_df.PA.100[result_df.PA.100$Scenario == "245",])

#pa_2.1 = pa_2 %>% filter(lon_dif > -5)

#dens2.1 <- MASS::kde2d(data.frame(x=pa_2.1$lon_dif, y=pa_2.1$lat_dif)$x,
#                     data.frame(x=pa_2.1$lon_dif, y=pa_2.1$lat_dif)$y)

dens2 <- MASS::kde2d(data.frame(x=pa_2$lon_dif, y=pa_2$lat_dif)$x,
                     data.frame(x=pa_2$lon_dif, y=pa_2$lat_dif)$y)


df2 = as.data.frame(expand.grid(x = dens2$x, y = dens2$y))
df2$z = as.vector(dens2$z)
df2 = na.omit(df2)

pa_3 = na.omit(result_df.PA.100[result_df.PA.100$Scenario == "585",])
dens3 <- MASS::kde2d(data.frame(x=pa_3$lon_dif, y=pa_3$lat_dif)$x,
                     data.frame(x=pa_3$lon_dif, y=pa_3$lat_dif)$y)
df3 = as.data.frame(expand.grid(x = dens3$x, y = dens3$y))
df3$z = as.vector(dens3$z)

df1 = na.omit(df1)
df2 = na.omit(df2)
df3 = na.omit(df3)

par(bg = 'white',mfrow = c(3,1), mar = c(1,2,2.5,1))
plot(NULL, xlim=c(xlim1.cpue,xlim2.cpue), ylim=c(ylim1.cpue,ylim2.cpue), axes = FALSE)
#    main = ("(B)"), #paste0("Biomass centroid shift (",nrow(cv_sel)," species)"),
title("(A)", adj = 0)
title(adj = 0.5, ylab = "Latitudinal shift rate(km/yr)",line=0.5)
box(col = "black")
#Add horizontal grid  
abline(h = seq(ylim1.cpue,ylim2.cpue), lty = 3, col = "grey")
#Add vertical grid
abline(v = seq(xlim1.cpue,xlim2.cpue),  lty = 3, col = "grey")
axis(1, seq(from = xlim1.cpue, to = xlim2.cpue), pos = 0, cex.axis = 0.8,lwd = 2)
axis(2, seq(from = ylim1.cpue, to = ylim2.cpue), pos = 0, cex.axis = 0.8, lwd = 2)


points(x = pa_3$lon_dif,
       y = pa_3$lat_dif,
       col = col[3],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa_2[pa_2$lon_dif >= -5,]$lon_dif,
       y = pa_2[pa_2$lon_dif >= -5,]$lat_dif,
       col = col[2],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa_1$lon_dif,
       y = pa_1$lat_dif,
       col = col[1],
       center.cex = 2, pch = 19, 
       add = T)

points(x = weighted.mean(df1$x, w = df1$z),
       y = weighted.mean(df1$y, w = df1$z),
       bg = col[1],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)

points(x = weighted.mean(df2$x, w = df2$z),
       y = weighted.mean(df2$y, w = df2$z),
       bg = col[2],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)


points(x = weighted.mean(df2[df2$x >= -5,]$x, w = df2[df2$x >= -5,]$z),
       y = weighted.mean(df2[df2$x >= -5,]$y, w = df2[df2$x >= -5,]$z),
       bg = col[2],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)


points(x = weighted.mean(df3$x, w = df3$z),
       y = weighted.mean(df3$y, w = df3$z),
       bg = col[3],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)

## CPUE HABITAT
result_df.CPUE.100 <- dat_sel %>% 
  filter(Var == "cpuehab",
         Year %in% c("2010", "2100")) %>%
  group_by(Species, Scenario) %>%
  mutate(lat_dif = (Lat - Lat[Year == "2010"])/90,
         lon_dif = (Lon - Lon[Year == "2010"])/90) %>% filter(Year == 2100) %>%
  ungroup()

pa.cpue1 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "126",])
dens.cpue.1 <- MASS::kde2d(data.frame(x=pa.cpue1$lon_dif, y=pa.cpue1$lat_dif)$x,
                           data.frame(x=pa.cpue1$lon_dif, y=pa.cpue1$lat_dif)$y)
df.cpue.1 = as.data.frame(expand.grid(x = dens.cpue.1$x, y = dens.cpue.1$y))
df.cpue.1$z = as.vector(dens.cpue.1$z)

pa.cpue2 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "245",])
dens.cpue.2 <- MASS::kde2d(data.frame(x=pa.cpue2$lon_dif, y=pa.cpue2$lat_dif)$x,
                           data.frame(x=pa.cpue2$lon_dif, y=pa.cpue2$lat_dif)$y)
df.cpue.2 = as.data.frame(expand.grid(x = dens.cpue.2$x, y = dens.cpue.2$y))
df.cpue.2$z = as.vector(dens.cpue.2$z)
df.cpue.2 = na.omit(df.cpue.2)

pa.cpue3 = na.omit(result_df.CPUE.100[result_df.CPUE.100$Scenario == "585",])
dens.cpue.3 <- MASS::kde2d(data.frame(x=pa.cpue3$lon_dif, y=pa.cpue3$lat_dif)$x,
                           data.frame(x=pa.cpue3$lon_dif, y=pa.cpue3$lat_dif)$y)
df.cpue.3 = as.data.frame(expand.grid(x = dens.cpue.3$x, y = dens.cpue.3$y))
df.cpue.3$z = as.vector(dens.cpue.3$z)

df.cpue.1 = na.omit(df.cpue.1)
df.cpue.2 = na.omit(df.cpue.2)
df.cpue.3 = na.omit(df.cpue.3)

plot(NULL, xlim=c(xlim1.cpue,xlim2.cpue), ylim=c(ylim1.cpue,ylim2.cpue), axes = FALSE)
#    main = ("(B)"), #paste0("Biomass centroid shift (",nrow(cv_sel)," species)"),
title("(B)", adj = 0)
title(adj = 0.5, ylab = "Latitudinal shift rate(km/yr)",line=0.5)
box(col = "black")
#Add horizontal grid  
abline(h = seq(ylim1.cpue,ylim2.cpue), lty = 3, col = "grey")
#Add vertical grid
abline(v = seq(xlim1.cpue,xlim2.cpue),  lty = 3, col = "grey")
axis(1, seq(from = xlim1.cpue, to = xlim2.cpue), pos = 0, cex.axis = 0.8,lwd = 2)
axis(2, seq(from = ylim1.cpue, to = ylim2.cpue), pos = 0, cex.axis = 0.8, lwd = 2)


points(x = pa.cpue3$lon_dif,
       y = pa.cpue3$lat_dif,
       col = col[3],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa.cpue2$lon_dif,
       y = pa.cpue2$lat_dif,
       col = col[2],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa.cpue1$lon_dif,
       y = pa.cpue1$lat_dif,
       col = col[1],
       center.cex = 2, pch = 19, 
       add = T)

points(x = weighted.mean(df.cpue.1$x, w = df.cpue.1$z),
       y = weighted.mean(df.cpue.1$y, w = df.cpue.1$z),
       bg = col[1],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)
points(x = weighted.mean(df.cpue.2$x, w = df.cpue.2$z),
       y = weighted.mean(df.cpue.2$y, w = df.cpue.2$z),
       bg = col[2],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)
points(x = weighted.mean(df.cpue.3$x, w = df.cpue.3$z),
       y = weighted.mean(df.cpue.3$y, w = df.cpue.3$z),
       bg = col[3],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)

## CPUE HABITAT

pa.best.cpue1 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "126",])
dens.best.cpue.1 <- MASS::kde2d(data.frame(x=pa.best.cpue1$lon_dif, y=pa.best.cpue1$lat_dif)$x,
                                data.frame(x=pa.best.cpue1$lon_dif, y=pa.best.cpue1$lat_dif)$y)
df.best.cpue.1 = as.data.frame(expand.grid(x = dens.best.cpue.1$x, y = dens.best.cpue.1$y))
df.best.cpue.1$z = as.vector(dens.best.cpue.1$z)

pa.best.cpue2 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "245",])
dens.best.cpue.2 <- MASS::kde2d(data.frame(x=pa.best.cpue2$lon_dif, y=pa.best.cpue2$lat_dif)$x,
                                data.frame(x=pa.best.cpue2$lon_dif, y=pa.best.cpue2$lat_dif)$y)
df.best.cpue.2 = as.data.frame(expand.grid(x = dens.best.cpue.2$x, y = dens.best.cpue.2$y))
df.best.cpue.2$z = as.vector(dens.best.cpue.2$z)
df.best.cpue.2 = na.omit(df.best.cpue.2)

pa.best.cpue3 = na.omit(result_df.BEST.CPUE.100[result_df.BEST.CPUE.100$Scenario == "585",])
dens.best.cpue.3 <- MASS::kde2d(data.frame(x=pa.best.cpue3$lon_dif, y=pa.best.cpue3$lat_dif)$x,
                                data.frame(x=pa.best.cpue3$lon_dif, y=pa.best.cpue3$lat_dif)$y)
df.best.cpue.3 = as.data.frame(expand.grid(x = dens.best.cpue.3$x, y = dens.best.cpue.3$y))
df.best.cpue.3$z = as.vector(dens.best.cpue.3$z)

df.best.cpue.1 = na.omit(df.best.cpue.1)
df.best.cpue.2 = na.omit(df.best.cpue.2)
df.best.cpue.3 = na.omit(df.best.cpue.3)

plot(NULL, xlim=c(xlim1.cpue,xlim2.cpue), ylim=c(ylim1.cpue,ylim2.cpue), axes = FALSE)
#    main = ("(B)"), #paste0("Biomass centroid shift (",nrow(cv_sel)," species)"),

title("(C)", adj = 0)
title(adj = 0.5,
      ylab = "Latitudinal shift rate (km/yr)",line = 0.5)
title(adj = 0.5,line = 0,
      xlab = "Longitudinal shift rate (km/yr) ")

box(col = "black")
#Add horizontal grid  
abline(h = seq(ylim1.cpue,ylim2.cpue), lty = 3, col = "grey")
#Add vertical grid
abline(v = seq(xlim1.cpue,xlim2.cpue),  lty = 3, col = "grey")
axis(1, seq(from = xlim1.cpue, to = xlim2.cpue), pos = 0, cex.axis = 0.8,lwd = 2)
axis(2, seq(from = ylim1.cpue, to = ylim2.cpue), pos = 0, cex.axis = 0.8, lwd = 2)


points(x = pa.best.cpue3$lon_dif,
       y = pa.best.cpue3$lat_dif,
       col = col[3],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa.best.cpue2$lon_dif,
       y = pa.best.cpue2$lat_dif,
       col = col[2],
       center.cex = 2, pch = 19, 
       add = T)

points(x = pa.best.cpue1$lon_dif,
       y = pa.best.cpue1$lat_dif,
       col = col[1],
       center.cex = 2, pch = 19, 
       add = T)

points(x = weighted.mean(df.best.cpue.1$x, w = df.best.cpue.1$z),
       y = weighted.mean(df.best.cpue.1$y, w = df.best.cpue.1$z),
       bg = col[1],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)
points(x = weighted.mean(df.best.cpue.2$x, w = df.best.cpue.2$z),
       y = weighted.mean(df.best.cpue.2$y, w = df.best.cpue.2$z),
       bg = col[2],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)
points(x = weighted.mean(df.best.cpue.3$x, w = df.best.cpue.3$z),
       y = weighted.mean(df.best.cpue.3$y, w = df.best.cpue.3$z),
       bg = col[3],cex = 2,
       center.cex = 2, pch = 21, 
       add = T)
dev.off()
dat <- data.frame(x = result_df.BEST.CPUE.100$lon_dif,
                  y = result_df.BEST.CPUE.100$lat_dif)
ch <- chull(na.omit(dat))

t.test(result_df.PA.100$lon_dif[result_df.PA.100$Scenario == "126"])
t.test(result_df.PA.100$lat_dif[result_df.PA.100$Scenario == "126"])
t.test(result_df.PA.100$lon_dif[result_df.PA.100$Scenario == "585"])
t.test(result_df.PA.100$lat_dif[result_df.PA.100$Scenario == "585"])

t.test(result_df.CPUE.100$lon_dif[result_df.BEST.CPUE.100$Scenario == "126"])
t.test(result_df.CPUE.100$lat_dif[result_df.BEST.CPUE.100$Scenario == "126"])
t.test(result_df.CPUE.100$lon_dif[result_df.BEST.CPUE.100$Scenario == "585"])
t.test(result_df.CPUE.100$lat_dif[result_df.BEST.CPUE.100$Scenario == "585"])

t.test(result_df.BEST.CPUE.100$lon_dif[result_df.BEST.CPUE.100$Scenario == "126"])
t.test(result_df.BEST.CPUE.100$lat_dif[result_df.BEST.CPUE.100$Scenario == "126"])
t.test(result_df.BEST.CPUE.100$lon_dif[result_df.BEST.CPUE.100$Scenario == "585"])
t.test(result_df.BEST.CPUE.100$lat_dif[result_df.BEST.CPUE.100$Scenario == "585"])

## Boxplot plotting just in case

lat_box = ggplot2::ggplot(dat[dat$Var == "PA",]) +
  geom_boxplot(aes(y = Lat, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lat (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Latitudinal shift habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

lon_box = ggplot2::ggplot(dat_sel[dat$Var == "PA",]) +
  geom_boxplot(aes(y = Lon, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lon (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Longitudinal shift habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

lat_box_cpue = ggplot2::ggplot(dat_sel[dat_sel$Var == "cpuehab",]) +
  geom_boxplot(aes(y = Lat, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lat (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Latitudinal shift cpue habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

lon_box_cpue = ggplot2::ggplot(dat_sel[dat_sel$Var == "cpuehab",]) +
  geom_boxplot(aes(y = Lon, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lon (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Longitudinal shift cpue habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

lat_box_best = ggplot2::ggplot(dat_sel[dat_sel$Var == "bestcpuehab",]) +
  geom_boxplot(aes(y = Lat, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lat (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Latitudinal shift top 10% habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

lon_box_best = ggplot2::ggplot(dat_sel[dat_sel$Var == "bestcpuehab",]) +
  geom_boxplot(aes(y = Lon, x = Year, fill = Scenario)) +
  #scale_fill_manual(values = cols.4) +
  ylab("Lon (km from 0°)") + 
  xlab("Year") + 
  ggtitle("Longitudinal shift top 10% habitat") + 
  scale_x_discrete(label = c("2010", "2030","2040","2050","2060","2070","2080","2090","2100")) + 
  theme(plot.title = element_text(hjust = 0.5))

ggpubr::ggarrange(lat_box, lon_box, 
                  lat_box_cpue, lon_box_cpue,
                  lat_box_best, lon_box_best, 
                  ncol = 2, nrow = 3)

pdf("Figure_S1_boxplot_shifts.pdf")
ggpubr::ggarrange(lat_box, lon_box, 
                  lat_box_cpue, lon_box_cpue,
                  lat_box_best, lon_box_best,
                  common.legend = TRUE,
                  ncol = 2, nrow = 3)

dev.off()
## Check if less species have an effect

### -- Result 4: Species' connectivity -- ### #####

conn = read.csv("connectivity.csv")[,-1] %>% filter(Estimate == "habitat")
head(conn)
conn = conn %>% filter(class == 1)
conn$dist = conn$dist/1000 # Distance in km
conn$areap = conn$areap/100000 # Area in km2

unique(conn$ListName)

conn = separate(conn,ListName, into = c("Year", "Scenario"), sep = "_")
conn$Year = as.numeric(conn$Year)
ggplot(conn) + 
  geom_boxplot(aes(x = Year, y = dist, group = Year), alpha = 0.5) + 
  facet_wrap(.~Scenario)





# Interactions are not significant, but without interactions, some things are

mod_npol = lm(npol ~ as.factor(Year) + Scenario,data = conn) # npol maybe higherh
mod_dist = lm(dist ~ as.factor(Year) + Scenario,data = conn)  # dist maybe higher at 2100 senario 585
mod_area = lm(areap~ as.factor(Year) + Scenario,data= conn) 

summary(lm(npol ~ Year + Scenario,data = conn))  # npol does not really change
summary(lm(dist ~ Year + Scenario,data = conn))  # dist does not really change
summary(lm(areap ~ Year + Scenario,data = conn)) # area does increases with CC

a = sjPlot::plot_model(mod_npol, terms = c("Year", "Scenario"), type = "pred") #+ annotate(geom="text", x=2015, y=25.25, label="(A)") + ylab("Number of polygons") + ggtitle("") + theme_bw()+ theme(plot.title = element_text(hjust = 0.5))
b = sjPlot::plot_model(mod_dist, terms = c("Year", "Scenario"), type = "pred") #+ annotate(geom="text", x=2015, y=130, label="(B)") + ylab(bquote("Distance "(Km)))+ scale_color_manual(values = cols) + ggtitle("") + theme_bw()+ theme(plot.title = element_text(hjust = 0.5))
c = sjPlot::plot_model(mod_area, terms = c("Year", "Scenario"), type = "pred") #+ annotate(geom="text", x=2015, y=440, label="(C)") + ylab(bquote("Area "(Km^2)))+ scale_color_manual(values = cols) + ggtitle("")  + theme_bw()+ theme(plot.title = element_text(hjust = 0.5))

plot = ggpubr::ggarrange(a,b,c, ncol=3, nrow=1, 
                  common.legend = TRUE,
                  legend="bottom")

ggpubr::annotate_figure(plot, 
                        top = ggpubr::text_grob("Connectivity measures",
                                                face = "bold", size = 14))

conn_lm_area = na.omit(conn) %>%
  group_by(Species, Scenario) %>% 
  dplyr::do(broom::tidy(lm(areap ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) 

conn_lm_npol = na.omit(conn) %>%
  group_by(Species, Scenario) %>% 
  dplyr::do(broom::tidy(lm(npol ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) 
 
conn_lm_dist = na.omit(conn) %>%
  group_by(Species, Scenario) %>% 
  dplyr::do(broom::tidy(lm(dist ~ Year, data = .))) %>%
  dplyr::select(Species, Scenario, term, estimate) %>%
  pivot_wider(names_from = term, values_from = c(estimate)) 

boxplot(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP1-2.6 (+1.6°C)"])
boxplot(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP1-2.6 (+1.6°C)"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "126"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "585"])
boxplot(conn_lm_area$Year[conn_lm_dist$Scenario == "SSP5-8.5 (+4.5°C)"])

wilcox.test(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP1-2.6 (+1.6°C)"])
wilcox.test(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP2-4.5 (+2.6°C)"])
wilcox.test(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP5-8.5 (+4.5°C)"])# Significant
wilcox.test(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP1-2.6 (+1.6°C)"])# Significant
wilcox.test(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP2-4.5 (+2.6°C)"])# Significant
wilcox.test(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP5-8.5 (+4.5°C)"])# Significant
wilcox.test(conn_lm_area$Year[conn_lm_area$Scenario == "SSP1-2.6 (+1.6°C)"])# Significant
wilcox.test(conn_lm_area$Year[conn_lm_area$Scenario == "SSP2-4.5 (+2.6°C)"])# Significant
wilcox.test(conn_lm_area$Year[conn_lm_area$Scenario == "SSP5-8.5 (+4.5°C)"])# Significant
wilcox.test(conn_lm_area$Year[conn_lm_area$Scenario == "SSP5-8.5 (+4.5°C)"])# Significant

boxplot(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP1-2.6 (+1.6°C)"])
boxplot(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP2-4.5 (+2.6°C)"])
boxplot(conn_lm_dist$Year[conn_lm_dist$Scenario == "SSP5-8.5 (+4.5°C)"])
boxplot(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP1-2.6 (+1.6°C)"])
boxplot(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP2-4.5 (+2.6°C)"])
boxplot(conn_lm_npol$Year[conn_lm_npol$Scenario == "SSP5-8.5 (+4.5°C)"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "SSP1-2.6 (+1.6°C)"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "SSP2-4.5 (+2.6°C)"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "SSP5-8.5 (+4.5°C)"])
boxplot(conn_lm_area$Year[conn_lm_area$Scenario == "SSP5-8.5 (+4.5°C)"])

cols = colortools::triadic("mediumpurple3")
conn_lm_area$Scenario = as.factor(conn_lm_area$Scenario)
levels(conn_lm_area$Scenario) = c("SSP1-2.6 (+1.6°C)","SSP2-4.5 (+2.6°C)","SSP5-8.5 (+4.5°C)")

conn_lm_npol$Scenario = as.factor(conn_lm_area$Scenario)
levels(conn_lm_npol$Scenario) = c("SSP1-2.6 (+1.6°C)","SSP2-4.5 (+2.6°C)","SSP5-8.5 (+4.5°C)")

conn_lm_dist$Scenario = as.factor(conn_lm_area$Scenario)
levels(conn_lm_dist$Scenario) = c("SSP1-2.6 (+1.6°C)","SSP2-4.5 (+2.6°C)","SSP5-8.5 (+4.5°C)")


areaplot = ggplot(conn_lm_area, aes(x = Year, fill = Scenario)) +
  #ggplot(conn_lm_area, aes(x = Scenario, y = Year, group = Scenario)) +
  geom_histogram() + 
  #geom_boxplot() +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols) +
  facet_wrap(~ Scenario, scales = "free_x") +
  theme_bw() + 
  #theme(legend.position = "none") +
  labs(title = "(B) Mean geographic range unit area",
       x = "",
       y = "Number of species") 

npolplot = ggplot(conn_lm_npol, aes(x = Year, fill = Scenario)) +
  geom_histogram() +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols) +
  facet_wrap(~ Scenario, scales = "free_x") +
  theme_bw() + 
  #theme(legend.position = "none") +
  labs(title = "(A) Number of geographic range units",
       x = "",
       y = "Number of species") 

distplot = ggplot(conn_lm_dist, aes(x = Year, fill = Scenario)) +
  geom_histogram() +
  #geom_histogram(aes(y = ..density..)) +
  #geom_density() + 
  scale_fill_manual(values = cols) +
  facet_wrap(~ Scenario, scales = "free_x") +
  theme_bw() + 
  #theme(legend.position = "none") +
  labs(title = "(C) Distance",
       x = "",
       y = "Number of species") 

ggpubr::ggarrange(npolplot,areaplot, distplot, ncol=1, nrow=3, 
                  common.legend = TRUE,
                  legend="bottom")

pdf("Figure_S2_Connectivity.pdf")
ggpubr::ggarrange(areaplot, npolplot,distplot, ncol=1, nrow=3, 
                  common.legend = TRUE,
                  legend="bottom")
dev.off()


png("Figure_Connectivity.png", res = 700, height = 6000, width = 5000)
ggpubr::ggarrange(npolplot,areaplot, distplot, ncol=1, nrow=3, 
                  common.legend = TRUE,
                  legend="bottom")
dev.off()

conn1 = conn_lm_area %>% select(Species, Scenario, Year) %>% rename(Area = Year)
conn2 = conn_lm_npol %>% select(Species, Scenario, Year) %>% rename(npol = Year)
conn3 = conn_lm_dist %>% select(Species, Scenario, Year) %>% rename(dist = Year)

conn=merge(conn1, merge(conn2, conn3, by = c("Species", "Scenario")), by = c("Species", "Scenario"))

write.csv(conn, "connectivity_suptable3.csv")


## Check with traits
traits = read.csv("data/Species_traits.csv")

conn_lm_npol$Species = gsub("[.]", " ", conn_lm_npol$Species)
conn_lm_area$Species = gsub("[.]", " ", conn_lm_area$Species)
conn_lm_dist$Species = gsub("[.]", " ", conn_lm_dist$Species)

conn_lm_npol = merge(conn_lm_npol, traits)
conn_lm_area = merge(conn_lm_area, traits)
conn_lm_dist = merge(conn_lm_dist, traits)

conn_lm_npol$Biogeography = as.factor(conn_lm_npol$Zoo_final)
conn_lm_area$Biogeography = as.factor(conn_lm_area$Zoo_final)
conn_lm_dist$Biogeography = as.factor(conn_lm_dist$Zoo_final)

a = ggplot(conn_lm_npol, aes(y=Year, fill = Biogeography)) +
  geom_boxplot() + 
  ylab("Range units (Polygons/yr)") +
  ggtitle("(A)") +
  facet_wrap(.~Scenario) + 
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) 

b = ggplot(conn_lm_area, aes(y=Year, fill = Biogeography)) +
  geom_boxplot() + 
  ylab(expression("Area rate (" * km^2/year * ")")) + 
  facet_wrap(.~Scenario) + 
  ggtitle("(B)") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

c = ggplot(conn_lm_dist, aes(y=Year, fill = Biogeography)) +
  geom_boxplot() + ylab("Distance rate (km/yr)")+
  facet_wrap(.~Scenario) + 
  ggtitle("(C)") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())


pdf("connectivity_bioge.pdf", height = 8)
ggpubr::ggarrange(a,b,c,nrow =3,align = "hv",
                           common.legend = TRUE,
                  legend="bottom")
dev.off()

png("connectivity_bioge.png", height = 6000, width = 5000, res = 700)
ggpubr::ggarrange(a,b,c,nrow =3,align = "hv",
                  common.legend = TRUE,
                  legend="bottom")
dev.off()

## Traits test ##

full.model.npol = lm(Year ~ Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                       scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                     data = conn_lm_npol)

full.model.area=lm(Year ~Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                        scale(Troph)+ scale(DepthMax)+ scale(Fecundity) + scale(Lm),
                      data = conn_lm_area)

full.model.dist =lm(Year ~Zoo_final + DemersPelag + scale(TempPrefMean) + scale(MaxLengthTL) + 
                      scale(Troph)+ scale(DepthMax) + scale(Lm) + scale(Fecundity),
                    data = conn_lm_dist)


# Number of polygons 
summary(full.model.npol)
# I drop Temp
m1 = lm(Year ~ Zoo_final + DemersPelag + scale(MaxLengthTL) + 
                       scale(Troph) + scale(DepthMax) + scale(Fecundity) + scale(Lm), 
                     data = conn_lm_npol)

summary(m1) # I drop Troph
m2 = lm(Year ~ Zoo_final + DemersPelag + scale(MaxLengthTL) + 
          scale(DepthMax) + scale(Fecundity) + scale(Lm), 
        data = conn_lm_npol)

summary(m2) # I drop Fecundity
m3 = lm(Year ~ Zoo_final + DemersPelag + scale(MaxLengthTL) + 
          scale(DepthMax) + scale(Lm), 
        data = conn_lm_npol)

summary(m3) # I drop MaxLengthTL
m4 = lm(Year ~ Zoo_final + DemersPelag + scale(DepthMax) + 
           scale(Lm), 
        data = conn_lm_npol)

summary(m4) # I drop demers pelag

m5 = lm(Year ~ Zoo_final + scale(DepthMax) + 
          scale(Lm), 
        data = conn_lm_npol)
summary(m5) # MaxLength


m6 = lm(Year ~ Zoo_final *Scenario+
          scale(Lm), 
        data = conn_lm_npol)

summary(m6)
plot(conn_lm_npol$Year ~ conn_lm_npol$Lm)

### Area of polygons -> Only length at maturity
summary(full.model.area)
m1 = lm(Year ~Zoo_final*Scenario + DemersPelag + 
          scale(DepthMax),
        data = conn_lm_area)
summary(m1)


plot(conn_lm_area$Year ~ conn_lm_area$Lm)
plot(effects::allEffects(m1)[[3]])

### Distance between polygons
summary(full.model.dist)
m1 = lm(Year ~Zoo_final*Scenario + 
          scale(Troph),
        data = conn_lm_dist)


summary(m1)
plot(effects::allEffects(m1))

### -- Figure 1: Study area -- ### #####
load( "data/allData.R") # X, Y, Tr & P Dataframes
load("all_layers.Rdata")

bathy = as.data.frame(all.layers[[1]][[1]][[1]], xy = T)
sbt = as.data.frame(all.layers[[1]][[1]][[2]], xy = T)


bathy$depth[bathy$depth >600] = 600
raster_data <- raster(matrix(rnorm(100), ncol = 10))


eliminate_extent <- extent(-Inf, 10, 80, Inf)

# Create a mask to identify points outside the desired region
mask <- all.layers[[1]][[1]][[1]]
mask[] <- 1
mask[eliminate_extent] <- NA
fmask = mask(all.layers[[1]][[1]][[1]], mask = mask)

bathy = as.data.frame(fmask, xy = T)
sbt = mask(all.layers[[1]][[1]][[2]], mask = fmask)

sbt = as.data.frame(sbt, xy = T)


a = ggplot() + 
  geom_tile(data = na.omit(bathy), aes(x = x, y = y, fill = depth), alpha = 0.8) +
  geom_point(data = coords, aes(x = Longitude, y = Latitude), 
             shape = 20, col = "black" ,fill = "black",cex = 0.8)+
  geom_sf(data = countries2) +
  xlim(-7, 52) +
  ylim(48,83) +
  scale_fill_gradientn(
    colours = terrain.colors(11),
    name = "Depth (m)") +
  #scale_fill_distiller(name = "Depth (m)" ,palette = "PuBu", direction = 1, na.value = "transparent")+  #scale_fill_gradientn(colors = rev(rainbow(4)))+
  #paletteer::scale_fill_paletteer_c("viridis::plasma")+
  #scico::scale_fill_scico(palette = "lajolla",na.value = "transparent", direction = -1)+
  #scale_fill_viridis(na.value = "transparent", direction = -1) +
  theme_bw() + 
  theme(plot.title = element_text(hjust = -0.1, size = 12),
        plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"),
        axis.title = element_text(size = 15))+  
  ylab("Latitude")+
  xlab("Longitude") +
  ggtitle("(A)") +
  ggspatial::annotation_north_arrow(
    which_north = "true",location = "br",
    height = unit(0.1, "npc"),
    width =  unit(0.13, "npc"))

b = ggplot() + 
  geom_tile(data = na.omit(sbt), aes(x = x, y = y, fill = sbt), alpha = 0.8) +
  #geom_point(data = coords, aes(x = Longitude, y = Latitude), 
  #           shape = 20, col = "black" ,fill = "black",cex = 0.8)+
  geom_sf(data = countries2) +
  xlim(-7, 52) +
  ylim(48,83) +
  scale_fill_gradientn(
    colours = terrain.colors(11),
    name = "bottom T (°C)") +
  ggtitle("(B)")+
  #scale_fill_distiller(name = "Depth (m)" ,palette = "PuBu", direction = 1, na.value = "transparent")+  #scale_fill_gradientn(colors = rev(rainbow(4)))+
  #paletteer::scale_fill_paletteer_c("viridis::plasma")+
  #scico::scale_fill_scico(palette = "lajolla",na.value = "transparent", direction = -1)+
  #scale_fill_viridis(na.value = "transparent", direction = -1) +
  theme_bw() + 
  theme(plot.title = element_text(hjust = -0.1, size = 12),
        plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"),
        axis.title = element_text(size = 15))+  
  ylab("Latitude")+
  xlab("Longitude") + 
  ggspatial::annotation_north_arrow(
    which_north = "true",location = "br",
    height = unit(0.1, "npc"),
    width =  unit(0.13, "npc"))

png("Figure1.png", height = 3000, width = 6000, res = 600)
ggpubr::ggarrange(a,b, ncol = 2, align = "hv")
dev.off()

### -- Figure 3: Species examples -- ### #####
# 3.3 Save three example species

PA.hab = readRDS("richnessobj.Rdata")[[1]]
cpue.hab = readRDS("richnessobj.Rdata")[[2]]

load("all_layers.Rdata")
arct = traits %>% filter(Zoo_final == "arctic") %>% dplyr::select(Species)
arct = gsub(" ", ".", arct$Species)

cpue.hab.sel = lapply(cpue.hab, function(X)  
  X = X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)])

row = which(colnames(cpue.hab.sel[[1]]) %in% arct)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th

clim = c(3,8,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}

resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
    #ggspatial::annotation_north_arrow(
    #  which_north = "true",location = "br",
    #  height = unit(0.08, "npc"),
    #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]))
mean = na.omit(mean)
ar0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+xlab("")
ar1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")
ar2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")
ar3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")

legend.ar = get_only_legend(ar0)

ar = gridExtra::grid.arrange(ar1,ar2,ar3, ncol = 3)

arctic = gridExtra::grid.arrange(ar, legend.ar, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(A)", x = 0, hjust = 0))

get_only_legend <- function(plot) {
  plot_table <- ggplot_gtable(ggplot_build(plot))
  legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
  legend <- plot_table$grobs[[legend_plot]]
  return(legend)
}
margin = theme(plot.margin = unit(c(0.01,0.01,0.01,0.01), "cm"))

## Arctic boreal

arbor = traits %>% filter(Zoo_final %in% c("arctic-boreal")) %>% dplyr::select(Species)
arbor = gsub(" ", ".", arbor$Species)

row = which(colnames(cpue.hab.sel[[1]]) %in% arbor)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)
arbor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+xlab("")

arbor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")
arbor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")
arbor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bor = get_only_legend(arbor0)
bor = gridExtra::grid.arrange(arbor1,arbor2,arbor3, ncol = 3)
arbor = gridExtra::grid.arrange(bor, legend.bor, ncol = 2, widths = c(8,1), 
                                top = grid::textGrob("(B)", x = 0, hjust = 0))

#arbor = ggpubr::ggarrange(arbor1,arbor2,arbor3,ncol = 3,common.legend = TRUE,legend="right")

## Boreal

bor = traits %>% filter(Zoo_final == "boreal") %>% dplyr::select(Species)
bor = gsub(" ", ".", bor$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% bor)  
## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

bor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+xlab("")
bor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")
bor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")
bor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bore = get_only_legend(bor0)
bore = gridExtra::grid.arrange(bor1,bor2,bor3, ncol = 3)
boreal = gridExtra::grid.arrange(bore, legend.bore, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(C)", x = 0, hjust = 0))

## Subtropical

subt = traits %>% filter(Zoo_final %in% c("subtropical","temperate")) %>% dplyr::select(Species)
subt = gsub(" ", ".", subt$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% subt)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}


mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

subt0 = plot_rich_diff(mean[mean$Year == 2010,])+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))
subt1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none")
subt2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")
subt3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")

legend.subt = get_only_legend(subt0)
subt = gridExtra::grid.arrange(subt1,subt2,subt3, ncol = 3)
subtropical = gridExtra::grid.arrange(subt, legend.subt, ncol = 2, widths = c(8,1), 
                                      top = grid::textGrob("(C)", x = 0, hjust = 0))

#subtropical = ggpubr::ggarrange(subt1,subt2,subt3,ncol = 3,common.legend = TRUE,legend="right")
margin = theme(plot.margin = unit(c(0.01,0.01,0.01,0.01), "cm"))

png("species_comp.png", width = 4800, height = 8000, res = 600)
ggpubr::ggarrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()

pdf("Example species_cpue2.pdf", height=14, width = 10)
ggpubr::ggarrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()

## Figure 5: Fish biomass map #####

cpue.hab.sel = lapply(cpue.hab, function(X)   
  X = log(X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)]))

row = colnames(cpue.hab.sel[[1]])  
## There are 27 layers, and 22,23,24 are 2100 with 2 SSP

res.b = raster::stack()
for (i in 1:length(row)) {
  e = row[i]
  MpredY.b <- cpue.hab.sel[[25]][,e]
  MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- exp(MpredY.b)
  names(MpredR.b) = paste( e, "biomass")
  res.b = raster::stack(res.b,MpredR.b)
  #values(res.b)[values(res.b)== 0] = NA
}
pres = sum(res.b, na.rm = T)

res.b = raster::stack()
for (i in 1:length(row)) {
  e = row[i]
  MpredY.b <- cpue.hab.sel[[24]][,e]
  MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- exp(MpredY.b)
  names(MpredR.b) = paste( e, "biomass")
  res.b = raster::stack(res.b,MpredR.b)
  #values(res.b)[values(res.b)== 0] = NA
}
ssp5 = sum(res.b, na.rm = T)

res.b = raster::stack()
for (i in 1:length(row)) {
  e = row[i]
  MpredY.b <- cpue.hab.sel[[23]][,e]
  MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- exp(MpredY.b)
  names(MpredR.b) = paste( e, "biomass")
  res.b = raster::stack(res.b,MpredR.b)
  #values(res.b)[values(res.b)== 0] = NA
}
ssp2 = sum(res.b, na.rm = T)

res.b = raster::stack()
for (i in 1:length(row)) {
  e = row[i]
  MpredY.b <- cpue.hab.sel[[22]][,e]
  MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- exp(MpredY.b)
  names(MpredR.b) = paste( e, "biomass")
  res.b = raster::stack(res.b,MpredR.b)
  #values(res.b)[values(res.b)== 0] = NA
}
ssp1 = sum(res.b, na.rm = T)

pres
plot(log(pres))
plot(pres)
a = as.data.frame(log(mask(pres,fmask)), xy = T)
b = as.data.frame(log(mask(ssp1,fmask)), xy = T)
c = as.data.frame(log(mask(ssp2,fmask)), xy = T)
d = as.data.frame(log(mask(ssp5,fmask)), xy = T)

plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = layer), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent", name = "log(CPUE)") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}
range(a$layer[a$layer>0])
range(b$layer[b$layer>0])
range(c$layer[c$layer>0])
range(d$layer[d$layer>0])

e = plot_rich_diff(a) + scale_fill_viridis(limits = c(4, 14), na.value = "transparent") + labs(fill = "Log(CPUE)") + ggtitle("Present") + theme(title = element_text(hjust = 0.5), axis.title.x = element_blank(), axis.text.x = element_blank(),axis.ticks.x = element_blank())
f = plot_rich_diff(b) + scale_fill_viridis(limits = c(4, 14), na.value = "transparent") + labs(fill = "Log(CPUE)") + ggtitle("SSP1-2.6 (+1.6°C)") + theme(title = element_text(hjust = 0.5), axis.title = element_blank(), axis.text = element_blank(),axis.ticks = element_blank())
g = plot_rich_diff(c) + scale_fill_viridis(limits = c(4, 14), na.value = "transparent") + labs(fill = "Log(CPUE)") + ggtitle("SSP2-4.5 (+2.6°C)") + theme(title = element_text(hjust = 0.5))
h = plot_rich_diff(d) + scale_fill_viridis(limits = c(4, 14), na.value = "transparent") + labs(fill = "Log(CPUE)") + ggtitle("SSP5-8.5 (+4.5°C)") + theme(title = element_text(hjust = 0.5), axis.title.y = element_blank(), axis.text.y = element_blank(),axis.ticks.y = element_blank())


png("Figure_biomass.png", width = 2000, height = 3000, res = 350)
ggpubr::ggarrange(e,f,g,h,
                  common.legend = T,
                  nrow = 2,ncol = 2,
                  legend ="bottom", align = "hv")

dev.off()

### -- Variance Partitioning Figure S1 -- ####

PA_var = readRDS("VarParPA.Rdata")
CPUE_var = readRDS("VarParBIOMASS.Rdata")
pa1 = as.data.frame(PA_var[[1]])
cpue1 = as.data.frame(CPUE_var[[1]])
pa1$vars = row.names(pa1)
cpue1$vars = row.names(cpue1)

pa = pivot_longer(pa1, cols = 1:ncol(pa1)-1,
                  names_to = "Species", values_to = "percent")

cpue = pivot_longer(cpue1, cols = 1:ncol(cpue1)-1,
                    names_to = "Species", values_to = "percent")

cpue$vars[cpue$vars == "I(depth^2)"] = "depth"
cpue$vars[cpue$vars == "I(sbt^2)"] = "sbt"
cpue = cpue %>% group_by(Species, vars) %>% summarise(percent = sum(percent))

pa$vars[pa$vars == "I(depth^2)"] = "depth"
pa$vars[pa$vars == "I(sbt^2)"] = "sbt"
pa = pa %>% group_by(Species, vars) %>% summarise(percent = sum(percent))


pa$vars[pa$vars == "Random: sample"] = "Spatial random effect"
cpue$vars[cpue$vars == "Random: sample"] = "Spatial random effect"
pa$vars = factor(pa$vars)
cpue$vars = factor(cpue$vars)
ord = c("depth", "sbt","Spatial random effect", "sic",  "nwc", "ewc", "phy", "dox")

cpue$vars = factor(cpue$vars, levels = rev(ord))
pa$vars = factor(pa$vars, levels = rev(ord))

my_palette <- brewer.pal(8, "Set1")

cpue_plot = ggplot(cpue,aes(x = Species, y = percent*100, fill = vars)) + 
  geom_bar(stat = "identity", colour = "black") +
  theme(axis.text.x = element_blank(),
        legend.text = element_text(size = 11),
        axis.text.y = element_text(size = 11),
        axis.title.y = element_text(size =13),
        axis.title.x = element_text(size=13))+
  scale_fill_manual(values = rev(my_palette)) +
  ylab("% Deviance explained") +
  ggtitle("(B)")


pa_plot = ggplot(pa,aes(x = Species, y = percent*100, fill = vars)) + 
  geom_bar(stat = "identity", colour = "black") +
  ggtitle("(A)") +
  theme(axis.text.x = element_blank(),
        legend.text = element_text(size = 11),
        axis.text.y = element_text(size = 11),
        axis.title.y = element_text(size =13),
        axis.title.x = element_text(size=13))+ 
  scale_fill_manual(values = rev(my_palette), name= "Variable") +
  ylab("% Deviance explained")


png("Figure_S1_varpar.png", width = 5000, height = 8000, res = 800)
ggpubr::ggarrange(pa_plot,cpue_plot, nrow = 2,
                  common.legend = T,
                  legend = "bottom")

dev.off()

### Supplementary figures examples Fig S3 #####

PA.hab = readRDS("richnessobj.Rdata")[[1]]
cpue.hab = readRDS("richnessobj.Rdata")[[2]]

load("all_layers.Rdata")
arct = traits %>% filter(Zoo_final == "arctic") %>% dplyr::select(Species)
arct = gsub(" ", ".", arct$Species)

cpue.hab.sel = lapply(cpue.hab, function(X)  
  X = X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)])

row = which(colnames(cpue.hab.sel[[1]]) %in% arct)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th

clim = c(1,6,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}

resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)
mean = na.omit(mean)
ar0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+xlab("")
ar1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")
ar2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")
ar3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")

legend.ar = get_only_legend(ar0)

ar = gridExtra::grid.arrange(ar1,ar2,ar3, ncol = 3)

arctic = gridExtra::grid.arrange(ar, legend.ar, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(A)", x = 0, hjust = 0))

get_only_legend <- function(plot) {
  plot_table <- ggplot_gtable(ggplot_build(plot))
  legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
  legend <- plot_table$grobs[[legend_plot]]
  return(legend)
}
margin = theme(plot.margin = unit(c(0.01,0.01,0.01,0.01), "cm"))

## Arctic boreal

arbor = traits %>% filter(Zoo_final %in% c("arctic-boreal")) %>% dplyr::select(Species)
arbor = gsub(" ", ".", arbor$Species)

row = which(colnames(cpue.hab.sel[[1]]) %in% arbor)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(1,6,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)
arbor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+xlab("")

arbor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")
arbor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")
arbor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bor = get_only_legend(arbor0)
bor = gridExtra::grid.arrange(arbor1,arbor2,arbor3, ncol = 3)
arbor = gridExtra::grid.arrange(bor, legend.bor, ncol = 2, widths = c(8,1), 
                                top = grid::textGrob("(B)", x = 0, hjust = 0))

#arbor = ggpubr::ggarrange(arbor1,arbor2,arbor3,ncol = 3,common.legend = TRUE,legend="right")

## Boreal

bor = traits %>% filter(Zoo_final == "boreal") %>% dplyr::select(Species)
bor = gsub(" ", ".", bor$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% bor)  
## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(1,6,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

bor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+xlab("")
bor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")
bor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")
bor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bore = get_only_legend(bor0)
bore = gridExtra::grid.arrange(bor1,bor2,bor3, ncol = 3)
boreal = gridExtra::grid.arrange(bore, legend.bore, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(C)", x = 0, hjust = 0))

## Subtropical

subt = traits %>% filter(Zoo_final %in% c("subtropical","temperate")) %>% dplyr::select(Species)
subt = gsub(" ", ".", subt$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% subt)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(1,6,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}


mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

subt0 = plot_rich_diff(mean[mean$Year == 2010,]) + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))
subt1 = plot_rich_diff(mean[mean$Year == 2010,]) + ggtitle("2010")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none")
subt2 = plot_rich_diff(mean[mean$Year == 2050,]) + ggtitle("2050")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")
subt3 = plot_rich_diff(mean[mean$Year == 2100,]) + ggtitle("2100")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")

legend.subt = get_only_legend(subt0)
subt = gridExtra::grid.arrange(subt1,subt2,subt3, ncol = 3)
subtropical = gridExtra::grid.arrange(subt, legend.subt, ncol = 2, widths = c(8,1), 
                                      top = grid::textGrob("(D)", x = 0, hjust = 0))

png("Figure S4_SSP1.png", width = 4800, height = 8000, res = 600)
gridExtra::grid.arrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()


pdf("Figure S4_SSP1.pdf", width = 9.6, height = 16)
gridExtra::grid.arrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()



### Supplementary figures examples Fig S4 #####

PA.hab = readRDS("richnessobj.Rdata")[[1]]
cpue.hab = readRDS("richnessobj.Rdata")[[2]]

load("all_layers.Rdata")
arct = traits %>% filter(Zoo_final == "arctic") %>% dplyr::select(Species)
arct = gsub(" ", ".", arct$Species)

cpue.hab.sel = lapply(cpue.hab, function(X)  
  X = X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)])

row = which(colnames(cpue.hab.sel[[1]]) %in% arct)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th

clim = c(2,7,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}

resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]))
mean = na.omit(mean)
ar0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+xlab("")
ar1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")
ar2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")
ar3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-6,9))+theme(legend.position = "none") +xlab("")+ ylab("")

legend.ar = get_only_legend(ar0)

ar = gridExtra::grid.arrange(ar1,ar2,ar3, ncol = 3)

arctic = gridExtra::grid.arrange(ar, legend.ar, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(A)", x = 0, hjust = 0))

get_only_legend <- function(plot) {
  plot_table <- ggplot_gtable(ggplot_build(plot))
  legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
  legend <- plot_table$grobs[[legend_plot]]
  return(legend)
}
margin = theme(plot.margin = unit(c(0.01,0.01,0.01,0.01), "cm"))

## Arctic boreal

arbor = traits %>% filter(Zoo_final %in% c("arctic-boreal")) %>% dplyr::select(Species)
arbor = gsub(" ", ".", arbor$Species)

row = which(colnames(cpue.hab.sel[[1]]) %in% arbor)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(2,7,9)
#resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)
arbor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+xlab("")

arbor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")
arbor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")
arbor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limits = c(-9,5))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bor = get_only_legend(arbor0)
bor = gridExtra::grid.arrange(arbor1,arbor2,arbor3, ncol = 3)
arbor = gridExtra::grid.arrange(bor, legend.bor, ncol = 2, widths = c(8,1), 
                                top = grid::textGrob("(B)", x = 0, hjust = 0))

#arbor = ggpubr::ggarrange(arbor1,arbor2,arbor3,ncol = 3,common.legend = TRUE,legend="right")

## Boreal

bor = traits %>% filter(Zoo_final == "boreal") %>% dplyr::select(Species)
bor = gsub(" ", ".", bor$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% bor)  
## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(2,7,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

bor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+xlab("")
bor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")
bor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")
bor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100")+ margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bore = get_only_legend(bor0)
bore = gridExtra::grid.arrange(bor1,bor2,bor3, ncol = 3)
boreal = gridExtra::grid.arrange(bore, legend.bore, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(C)", x = 0, hjust = 0))

## Subtropical

subt = traits %>% filter(Zoo_final %in% c("subtropical","temperate")) %>% dplyr::select(Species)
subt = gsub(" ", ".", subt$Species)
row = which(colnames(cpue.hab.sel[[1]]) %in% subt)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(2,7,9)
resu.b=list()
for (i in 1:length(row)) {
  e = row[i]
  #res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    #MpredY   <- PA.hab.sel[[k]][[3]][,e]
    MpredY.b <- cpue.hab.sel[[k*3]][,e]
    #MpredY.b = MpredY.b * MpredY
    #MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    #values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    #names(MpredR) = paste(colnames( PA.hab.sel[[k]][[3]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k*3]])[e], names(cpue.hab.sel[[k*3]])[k],"abu")
    #res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  #resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
resu.b1 = lapply(resu.b, function(X) mask( X, fmask))
mean = list()
for (i in 1:length(resu.b1)){
  ress_2010 = data.frame(coordinates(resu.b1[[i]][[3]]), value = values(resu.b1[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b1[[i]][[1]]), value = values(resu.b1[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b1[[i]][[2]]), value = values(resu.b1[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}


mean = do.call(rbind,mean)
mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") 
  #ggspatial::annotation_north_arrow(
  #  which_north = "true",location = "br",
  #  height = unit(0.08, "npc"),
  #  width =  unit(0.13, "npc"))
}
range(log(mean$value[mean$value>0]), na.rm = T)

subt0 = plot_rich_diff(mean[mean$Year == 2010,]) + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))
subt1 = plot_rich_diff(mean[mean$Year == 2010,]) + ggtitle("2010")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none")
subt2 = plot_rich_diff(mean[mean$Year == 2050,]) + ggtitle("2050")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")
subt3 = plot_rich_diff(mean[mean$Year == 2100,]) + ggtitle("2100")+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "transparent",limit = c(-9.1,8))+theme(legend.position = "none") + ylab("")

legend.subt = get_only_legend(subt0)
subt = gridExtra::grid.arrange(subt1,subt2,subt3, ncol = 3)
subtropical = gridExtra::grid.arrange(subt, legend.subt, ncol = 2, widths = c(8,1), 
                                      top = grid::textGrob("(C)", x = 0, hjust = 0))

png("Figure S5_SSP2.png", width = 4800, height = 8000, res = 600)
gridExtra::grid.arrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()

##PA ####
a.PA.mean = readRDS("predY_mean.rds")
a.cpue.mean= readRDS("predY_cpue_mean_exp.rds")

thresh = read.csv("thresholds.csv")
PA.hab = a.PA.mean
PA.hab = lapply(a.PA.mean, function(y)
  lapply(y, function(x)
    ifelse(x > thresh$threshold, 1,0)))

cpue.hab = vector("list", 9)
for (i in 1:9) {
  for (k in 1:3){
    cpue.hab[[i]][[k]] =
      a.cpue.mean[[i]][[k]] *
      PA.hab[[i]][[k]]
  }}


### CPUE ####
cpue.hab.sel = lapply(cpue.hab, function(Y) lapply(Y,function(X)   
  X = X[,which(colnames(cpue.hab[[1]][[1]]) %in% cv_sel$Sp)]))  

PA.hab.sel = lapply(PA.hab, function(Y) lapply(Y,function(X)   
  X = X[,which(colnames(PA.hab[[1]][[1]]) %in% cv_sel$Sp)]))  

arct = traits %>% filter(Zoo_final %in% c("arctic")) %>% dplyr::select(Species)
arct = gsub(" ", ".", arct$Species)
row = which(colnames(PA.hab.sel[[1]][[1]]) %in% arct)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    MpredY   <- PA.hab.sel[[k]][[2]][,e]
    MpredY.b <- cpue.hab.sel[[k]][[2]][,e]
    MpredY.b = MpredY.b * MpredY
    MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR) = paste(colnames( PA.hab.sel[[k]][[2]])[e], names(PA.hab.sel[[k]][[3]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k]][[2]])[e], names(cpue.hab.sel[[k]][[3]])[k],"abu")
    res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
mean = list()
for (i in 1:length(resu)){
  ress_2010 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}
range(mean$value,na.rm = T)
mean = na.omit(mean)
mean$value[log(mean$value) < -5] = NA
ar0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,7))+xlab("")
ar1 = plot_rich_diff(mean[mean$Year == 2010,])+ggtitle("2010") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,7))+theme(legend.position = "none") +xlab("")
ar2 = plot_rich_diff(mean[mean$Year == 2050,])+ggtitle("2050") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,7))+theme(legend.position = "none") +xlab("")+ ylab("")
ar3 = plot_rich_diff(mean[mean$Year == 2100,])+ggtitle("2100") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,7))+theme(legend.position = "none") +xlab("")+ ylab("")

legend.ar = get_only_legend(ar0)

ar = gridExtra::grid.arrange(ar1,ar2,ar3, ncol = 3)

arctic = gridExtra::grid.arrange(ar, legend.ar, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(A)", x = 0, hjust = 0))

#arctic = ggpubr::ggarrange(ar1,ar2,ar3,ncol = 3,common.legend = TRUE,legend="right")

## Arctic boreal

arbor = traits %>% filter(Zoo_final %in% c("arctic-boreal")) %>% dplyr::select(Species)
arbor = gsub(" ", ".", arbor$Species)
row = which(colnames(PA.hab.sel[[1]][[1]]) %in% arbor)  

## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    MpredY   <- PA.hab.sel[[k]][[2]][,e]
    MpredY.b <- cpue.hab.sel[[k]][[2]][,e]
    MpredY.b = MpredY.b * MpredY
    MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR) = paste(colnames( PA.hab.sel[[k]][[2]])[e], names(PA.hab.sel[[k]][[2]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k]][[2]])[e], names(cpue.hab.sel[[k]][[2]])[k],"abu")
    res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
mean = list()
for (i in 1:length(resu)){
  ress_2010 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}
range(log(mean$value),na.rm = T)
mean = na.omit(mean)
mean$value[log(mean$value) < -5] = NA
arbor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,3))+xlab("")

arbor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,3))+theme(legend.position = "none")+xlab("")
arbor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,3))+theme(legend.position = "none")+xlab("")+ ylab("")
arbor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limits = c(-5,3))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bor = get_only_legend(arbor0)
bor = gridExtra::grid.arrange(arbor1,arbor2,arbor3, ncol = 3)
arbor = gridExtra::grid.arrange(bor, legend.bor, ncol = 2, widths = c(8,1), 
                                top = grid::textGrob("(B)", x = 0, hjust = 0))


#arbor = ggpubr::ggarrange(arbor1,arbor2,arbor3,ncol = 3,common.legend = TRUE,legend="right")

## Boreal

bor = traits %>% filter(Zoo_final == "boreal") %>% dplyr::select(Species)
bor = gsub(" ", ".", bor$Species)
row = which(colnames(PA.hab.sel[[1]][[1]]) %in% bor)  
## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    MpredY   <- PA.hab.sel[[k]][[2]][,e]
    MpredY.b <- cpue.hab.sel[[k]][[2]][,e]
    MpredY.b = MpredY.b * MpredY
    MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR) = paste(colnames( PA.hab.sel[[k]][[2]])[e], names(PA.hab.sel[[k]][[2]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k]][[2]])[e], names(cpue.hab.sel[[k]][[2]])[k],"abu")
    res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
mean = list()
for (i in 1:length(resu)){
  ress_2010 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = mean(value))
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = log(value)), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}
range(log(mean$value),na.rm = T)
mean = na.omit(mean)
mean$value[log(mean$value) < -5] = NA
bor0 = plot_rich_diff(mean[mean$Year == 2010,]) + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-3,3))+xlab("")

bor1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-3,3))+theme(legend.position = "none")+xlab("")
bor2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")
bor3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100") + margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-3,3))+theme(legend.position = "none")+xlab("")+ ylab("")

legend.bore = get_only_legend(bor0)
bore = gridExtra::grid.arrange(bor1,bor2,bor3, ncol = 3)
boreal = gridExtra::grid.arrange(bore, legend.bore, ncol = 2, widths = c(8,1), 
                                 top = grid::textGrob("(C)", x = 0, hjust = 0))


#boreal = ggpubr::ggarrange(bor1,bor2,bor3,ncol = 3,common.legend = TRUE,legend="right")


## Subtropical

subt = traits %>% filter(Zoo_final %in% c("subtropical","temperate")) %>% dplyr::select(Species)
subt = gsub(" ", ".", subt$Species)
row = which(colnames(PA.hab.sel[[1]][[1]]) %in% subt)  
## Clim corresponds to which element of the list 1:9 = 2030,2040,2050...2100,2010 i want to dplyr::select.
## 2050 is the 3rd, 2100 is thr 8th and 2010 is the 9th
clim = c(3,8,9)
resu = list()
resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in 1:3){
    k = clim[l]
    MpredY   <- PA.hab.sel[[k]][[2]][,e]
    MpredY.b <- cpue.hab.sel[[k]][[2]][,e]
    MpredY.b = MpredY.b * MpredY
    MpredR   <- all.layers[[1]][[1]][[1]]
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR)[which(!is.na(values(MpredR)))] <- MpredY
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR) = paste(colnames( PA.hab.sel[[k]][[2]])[e], names(PA.hab.sel[[k]][[2]])[k])
    names(MpredR.b) = paste(colnames(cpue.hab.sel[[k]][[2]])[e], names(cpue.hab.sel[[k]][[2]])[k],"abu")
    res = raster::stack(res,MpredR)
    res.b = raster::stack(res.b,MpredR.b)
  }
  resu[[i]] = res
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}
mean = list()
for (i in 1:length(resu)){
  ress_2010 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]), Year = 2010, sp = i)
  ress_2050 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]), Year = 2050, sp = i)
  ress_2100 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]), Year = 2100, sp = i)
  mean[[i]] = rbind(ress_2100 ,ress_2050 ,ress_2010)
}

mean = do.call(rbind,mean)

mean = mean %>% group_by(x,y,Year) %>% mutate(value = log(mean(value)))
Oplot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = value), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}
range(mean$value,na.rm = T)
mean$value[mean$value < -5] = NA

mean = na.omit(mean)

#mean$value[log(mean$value) < -5] = NA
subt0 = plot_rich_diff(mean[mean$Year == 2010,])+margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-5,9))
subt1 = plot_rich_diff(mean[mean$Year == 2010,])+ ggtitle("2010") +margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-5,9))+theme(legend.position = "none")
subt2 = plot_rich_diff(mean[mean$Year == 2050,])+ ggtitle("2050") +margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-5,9))+theme(legend.position = "none") + ylab("")
subt3 = plot_rich_diff(mean[mean$Year == 2100,])+ ggtitle("2100") +margin + scale_fill_viridis(name = "Log(CPUE)", na.value = "darkgrey",limit = c(-5,9))+theme(legend.position = "none") + ylab("")

legend.subt = get_only_legend(subt0)
subt = gridExtra::grid.arrange(subt1,subt2,subt3, ncol = 3)
subtropical = gridExtra::grid.arrange(subt, legend.subt, ncol = 2, widths = c(8,1), 
                                      top = grid::textGrob("(C)", x = 0, hjust = 0))

#subtropical = ggpubr::ggarrange(subt1,subt2,subt3,ncol = 3,common.legend = TRUE,legend="right")
margin = theme(plot.margin = unit(c(0.05,0.05,0.05,0.05), "cm"))

## need to save it as image because its too big to open in inkscape
png("Figure S5_SSP2.png", width = 4800, height = 8000, res = 600)
gridExtra::grid.arrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()

pdf("Figure S5_SSP2.pdf", height=14, width = 10)
ggpubr::ggarrange(arctic, arbor,boreal,subtropical, nrow = 4)
dev.off()





### Supplementary figures examples Fig S5 - All species #####


##PA ####
a.PA.mean = readRDS("predY_mean.rds")
cpue.hab= readRDS("predY_cpue_mean.rds")
cpue.hab = readRDS("species_dist.Rdata")
PA.hab = readRDS("species_dist_pa.Rdata")

cpue.hab.sel = lapply(cpue.hab, function(X)   
  X = log(X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)]))

row = colnames(PA.hab[[1]])  
## There are 27 layers, and 22,23,24 are 2100 with 2 SSP

resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in c(22,23,24)){
    MpredY.b  <- PA.hab[[l]][,e]
    #MpredY.b <- cpue.hab.sel[[l]][,e]
#    MpredY.b = log(exp(MpredY.b) * MpredY)
#    MpredY.b[MpredY.b < log(thresh[e])] = NA
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR.b) = paste( e, "biomass")
    res.b = raster::stack(res.b,MpredR.b)
    values(res.b)[values(res.b)== 0] = NA
    
  }
  MpredY.b   <- PA.hab[[25]][,e]
  #MpredY.b <- cpue.hab.sel[[25]][,e]
  #MpredY.b[MpredY.b < log(thresh[e])] = NA
  #MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
  res.b = raster::stack(res.b,MpredR.b)
  values(res.b)[values(res.b)== 0] = NA
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}

mean = list()
for (i in 1:length(resu.b)){
  ssp0 = data.frame(coordinates(resu.b[[i]][[4]]), value = values(resu.b[[i]][[4]]))
  ssp1 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]))
  ssp2 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]))
  ssp3 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]))
  mean[[i]] = list(ssp0, ssp1 ,ssp2 ,ssp3)
}

library(grid)
library(gridExtra)
plot_rich_diff = function(X){
  ggplot() + 
    geom_tile(data = X, aes(x, y = y, fill = value), width = 1)+
    geom_sf(data = countries2) +
    #geom_polygon(data = countries, aes(long, lat, group = group)) +
    xlim(-7, 52) +
    ylim(48,83)+
    scale_fill_viridis(na.value = "transparent", name = "P") +
    theme_bw() + 
    theme(plot.title = element_text(hjust = 0.5, size = 10),
          plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm"))+  
    ylab("Latitude")+
    xlab("Longitude") + 
    ggspatial::annotation_north_arrow(
      which_north = "true",location = "br",
      height = unit(0.1, "npc"),
      width =  unit(0.13, "npc"))
}

pdf("Writing/SM4_PA_2.pdf", width = 13, height = 4)
names = colnames(PA.hab[[1]])
names = gsub("[.]", " ", names)
for (i in 1:length(mean)){
  ssp0 = plot_rich_diff(mean[[i]][[1]]) + ggtitle("Present-day")
  ssp1 = plot_rich_diff(mean[[i]][[2]]) + ggtitle("SSP1-2.6 (+1.6°C)")
  ssp2 = plot_rich_diff(mean[[i]][[3]]) + ggtitle("SSP2-4.5 (+2.6°C)")
  ssp3 = plot_rich_diff(mean[[i]][[4]]) + ggtitle("SSP5-8.5 (+4.5°C)")
  formatted_title <- grid::textGrob(label = names[i], gp = gpar(fontface = "italic"))
  plot = ggpubr::ggarrange(ssp0, ssp1,ssp2,ssp3,
                           align = "hv",
                           nrow = 1)
  b = ggpubr::annotate_figure(plot, top = formatted_title)
  plot(b)
}
dev.off()

## CPUE 
cpue.hab.sel = lapply(cpue.hab, function(X)   
  X = log(X[,which(colnames(cpue.hab[[1]]) %in% cv_sel$Sp)]))

row = colnames(cpue.hab.sel[[1]])  
## There are 27 layers, and 22,23,24 are 2100 with 2 SSP

resu.b=list()

for (i in 1:length(row)) {
  e = row[i]
  res = raster::stack()
  res.b = raster::stack()
  for (l in c(22,23,24)){
    #MpredY.b  <- PA.hab[[l]][,e]
    MpredY.b <- cpue.hab.sel[[l]][,e]
    #    MpredY.b = log(exp(MpredY.b) * MpredY)
    #    MpredY.b[MpredY.b < log(thresh[e])] = NA
    MpredR.b <- all.layers[[1]][[1]][[1]]
    values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
    names(MpredR.b) = paste( e, "biomass")
    res.b = raster::stack(res.b,MpredR.b)
    values(res.b)[values(res.b)== 0] = NA
    
  }
  MpredY.b   <- cpue.hab.sel[[25]][,e]
  #MpredY.b <- cpue.hab.sel[[25]][,e]
  #MpredY.b[MpredY.b < log(thresh[e])] = NA
  #MpredR.b <- all.layers[[1]][[1]][[1]]
  values(MpredR.b)[which(!is.na(values(MpredR.b)))] <- MpredY.b
  res.b = raster::stack(res.b,MpredR.b)
  values(res.b)[values(res.b)== 0] = NA
  resu.b[[i]] = res.b
  #saveRDS(res, file = paste(names(MpredR), ".rds", sep = ""))
  #saveRDS(res.b, file = paste(names(MpredR.b), ".rds", sep = ""))
}

mean = list()
for (i in 1:length(resu.b)){
  ssp0 = data.frame(coordinates(resu.b[[i]][[4]]), value = values(resu.b[[i]][[4]]))
  ssp1 = data.frame(coordinates(resu.b[[i]][[1]]), value = values(resu.b[[i]][[1]]))
  ssp2 = data.frame(coordinates(resu.b[[i]][[2]]), value = values(resu.b[[i]][[2]]))
  ssp3 = data.frame(coordinates(resu.b[[i]][[3]]), value = values(resu.b[[i]][[3]]))
  mean[[i]] = list(ssp0, ssp1 ,ssp2 ,ssp3)
}

pdf("Writing/SM4_cpue.pdf", width = 13, height = 4)
names = colnames(cpue.hab.sel[[1]])
names = gsub("[.]", " ", names)
for (i in 1:length(mean)){
  ssp0 = plot_rich_diff(mean[[i]][[1]]) + ggtitle("Present-day")
  ssp1 = plot_rich_diff(mean[[i]][[2]]) + ggtitle("SSP1-2.6 (+1.6°C)")
  ssp2 = plot_rich_diff(mean[[i]][[3]]) + ggtitle("SSP2-4.5 (+2.6°C)")
  ssp3 = plot_rich_diff(mean[[i]][[4]]) + ggtitle("SSP5-8.5 (+4.5°C)")
  formatted_title <- grid::textGrob(label = names[i], gp = gpar(fontface = "italic"))
  plot = ggpubr::ggarrange(ssp0, ssp1,ssp2,ssp3,
                           align = "hv",
                           nrow = 1)
  b = ggpubr::annotate_figure(plot, top = formatted_title)
  plot(b)
}
dev.off()
